# Gide Coding Agent Extension Environment Variables
# ================================================
# This file contains all environment variables needed for the Gide Coding Agent VSCode extension.
# Copy this file to .env in your VSCode workspace or set these as system environment variables.
#
# SECURITY NOTE: Never commit actual API keys or secrets to version control.
# Use secure environment variable management in production.

# Required Configuration
# =====================

# The endpoint URL for your Railway-hosted coding agent service
# This is the main API endpoint that the extension will communicate with
GIDE_AGENT_ENDPOINT=https://your-agent-service.railway.app/api/chat

# Optional Configuration
# =====================

# API key for agent authentication (if your agent service requires authentication)
# Keep this secret and never commit to version control
GIDE_API_KEY=your_api_key_here

# Model provider (e.g., 'openai', 'anthropic', 'google', 'azure')
# This tells the agent which AI service to use
GIDE_MODEL_PROVIDER=openai

# Specific model name to use (e.g., 'gpt-4', 'claude-3-sonnet', 'gemini-pro')
# The exact model to use for code generation
GIDE_MODEL_NAME=gpt-4

# Request timeout in milliseconds (default: 30000 = 30 seconds)
# How long to wait for agent responses before timing out
GIDE_REQUEST_TIMEOUT=30000

# Development and Debugging
# =========================

# Enable debug logging (set to 'true' to enable)
GIDE_DEBUG=false

# Development agent endpoint (for testing with local services)
# GIDE_AGENT_ENDPOINT=http://localhost:3000/api/chat

# Example Production Configuration
# ================================
# For a production Railway deployment, your configuration might look like:
#
# GIDE_AGENT_ENDPOINT=https://gide-agent-production.railway.app/api/chat
# GIDE_API_KEY=sk-proj-...your-openai-key...
# GIDE_MODEL_PROVIDER=openai
# GIDE_MODEL_NAME=gpt-4
# GIDE_REQUEST_TIMEOUT=45000

# Setting Environment Variables
# =============================
# 
# Method 1: VSCode Settings (less secure for API keys)
# - Open VSCode settings (Ctrl/Cmd + ,)
# - Search for "gide-coding-agent"
# - Configure the settings directly
#
# Method 2: System Environment Variables (recommended for production)
# Linux/macOS:
#   export GIDE_AGENT_ENDPOINT="https://your-service.railway.app/api/chat"
#   export GIDE_API_KEY="your_api_key_here"
#
# Windows:
#   set GIDE_AGENT_ENDPOINT=https://your-service.railway.app/api/chat
#   set GIDE_API_KEY=your_api_key_here
#
# Method 3: .env file (for development)
# - Copy this file to .env in your project root
# - VSCode will load these variables automatically (requires dotenv support)
#
# Method 4: Docker/Container deployment
# docker run -e GIDE_AGENT_ENDPOINT="https://your-service.railway.app/api/chat" \
#            -e GIDE_API_KEY="your_api_key" \
#            your-vscode-image
#
# Method 5: Railway deployment
# - Set these as environment variables in your Railway service dashboard
# - Railway will inject them at runtime

# Troubleshooting
# ===============
# If the extension shows configuration errors:
# 1. Ensure GIDE_AGENT_ENDPOINT is set and accessible
# 2. Check that your API key is valid (if using authentication)
# 3. Verify your agent service is running and responding
# 4. Check the VSCode Developer Console for detailed error messages